//–ò–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∞—É—Å—Å–æ–≤—É –ø–∏—Ä–∞–º–∏–¥—É
//    ‚ó¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫—Ç–∞–≤
//    ‚ó¶ (–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
//    ‚ó¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ —É—Ä–æ–≤–Ω–µ–π –≤ –æ–∫—Ç–∞–≤–µ
//    ‚ó¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è ùúéùúé0–∏ ùúéùúé1
//–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—éL(x,y,ùúéùúé)
//    ‚ó¶ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
//    ‚ó¶ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
//–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
//    ‚ó¶ ùúéùúé–Ω–∞ –∫–∞–∂–¥–æ–º –º–∞—Å—à—Ç–∞–±–µ –≤ –æ–∫—Ç–∞–≤–µ
//    ‚ó¶ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è ùúéùúé–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
//    (–ü–æ–≤. —Å–ª–æ–∂–Ω–æ—Å—Ç—å) —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã —Å -1 –æ–∫—Ç–∞–≤—ã

#include "imageaccessor.h"
#include "scaleoperation.h"

#include <QDir>
#include <QString>
#include <iostream>

void lab2(QString path, QString fileName, QString extension, int numOfOctaves, int numOfLayers, double sigmaA, double sigma0, double sigmaL)
{
    QDir dir;
    QString pyramidPath = path+"lab2"+fileName+"\\";
    dir.mkdir(pyramidPath);
    std::cout<<"load img..."<<std::endl;
    GrayScaleMatrix inputmatrix = ImageAccessor::GetMatrixFromImage(path+fileName+extension);
    std::cout<<"computing pyramid..."<<std::endl;
    ScaleOperation::Pyramid myPyramid = ScaleOperation::GetPyramid(inputmatrix,numOfOctaves, numOfLayers, sigmaA, sigma0);

    std::cout<<"saving pyramid..."<<std::endl;
    int octaveCount=0, layerCount=0;
    foreach(ScaleOperation::Octave currOctave, myPyramid.octaves)
    {
        layerCount=0;
        foreach(ScaleOperation::Layer currLayer, currOctave.layers)
        {
            ImageAccessor::DrawImageFromMatrix(currLayer.matrix,pyramidPath+"octave"+QString::number(octaveCount)+"_layer"+QString::number(layerCount++)+extension);
        }
        octaveCount++;
    }

    std::cout<<"Computing image with L(x,y,sigma)..."<<std::endl;
    GrayScaleMatrix lMatrix(inputmatrix.GetWidth(),inputmatrix.GetHeight());
    for(int i=0; i<lMatrix.GetHeight(); i++)
    {
        for(int j=0; j<lMatrix.GetWidth(); j++)
        {
            lMatrix.SetValue(j,i,ScaleOperation::GetL(myPyramid,j,i,sigmaL));
        }

    }
    std::cout<<"Saving image with L(x,y,sigma)..."<<std::endl;
    ImageAccessor::DrawImageFromMatrix(lMatrix,pyramidPath+"image_L(x,y,sigma)"+extension);
    std::cout<<"Done!"<<std::endl;
}
